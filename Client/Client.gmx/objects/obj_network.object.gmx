<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1410065407</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
only_single();

//Set reference
application_surface_enable(false);
device_mouse_dbclick_enable(false);
randomize();

//Whether a connection (or an attempt) is active
active = false;

//Cached login info
login_uuid = "";
login_name = "";
login_id = "";

//Set ping
my_ping = current_time;
ping = current_time;

//Out ping
global.out_ping = 10000;

//Set timeout
network_set_config(network_config_connect_timeout, 200);

//Set ip
if(NN.debug_modes)
    global.ip = "127.0.0.1";
else
    global.ip = "61.84.196.75";

/* 아이피에 관해
* KT IDC 서버 외부 연결 : 61.84.196.75
* KT IDC 서버 내부 연결 : 172.16.113.102 
* 포트는 아마 기억상 20000번부터 쭉 20005번까지 열려있을거임
*/

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init values
delay_x = 0;
delay_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handoff
user_ins = -1;
global.can_control = 1;
obj_joy.add_mode = 1;
obj_joy2.add_mode = 1;
switch(handoff_type) {
    case 1:
        user_ins = instance_create(handoff_x, handoff_y, obj_sworder);
    break;
     
    case 2:
        user_ins = instance_create(handoff_x, handoff_y, obj_hammer);
    break;
                                   
    case 3:
        user_ins = instance_create(handoff_x, handoff_y, obj_gunner);
    break;
                            
    case 4:
        user_ins = instance_create(handoff_x, handoff_y, obj_magician);
    break;
}
if(user_ins != -1) {
    user_ins.control = 1;
    user_ins.user_id = global.login_id;
    user_ins.team = global.team;
    system.target = user_ins;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// New client
user_ins = -1;
switch(global.select_char) {
    case 0:
        user_ins = instance_create(delay_x, delay_y, obj_sworder);
    break;
    
    case 1:
        user_ins = instance_create(delay_x, delay_y, obj_hammer);
    break;
    
    case 2:
        user_ins = instance_create(delay_x, delay_y, obj_gunner);
    break;
    
    case 3:
        user_ins = instance_create(delay_x, delay_y, obj_magician);
    break;
}
user_ins.control = 1;
user_ins.user_id = global.login_id;
user_ins.team = global.team;
//system.target = user_ins;

var ins = instance_create(480, 360, obj_scene);
ins.target_x = user_ins.x;
ins.target_y = user_ins.y;
ins.target = user_ins;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to the correct server
nn_connect(global.ip, NN.port);

//Mark connection as active (or at least, actively in progress)
active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ping
var status = nn_status();
my_ping = current_time;
if (status == NN.status_connected){
    var buffer = buffer_create(1, buffer_grow, 1);
    buffer_write(buffer, buffer_u8, NN.signal_ping);
    nn_send_message(buffer);
    buffer_delete(buffer);
}

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connection check
status = nn_status();
if (status == NN.status_disconnected) {
    if (!active) {
        active = true;
        alarm[1] = 1; //Connect attempt
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monitor running status

if (active) {
    //Connection successful in login room, show login
    if (room == rm_connecting) &amp;&amp; (status == NN.status_connected) {
        room_goto(rm_login);
    }

    //Connection broke
    if (status == NN.status_disconnected) {
        //Connection broke while chatting, go back to login screen and ask for reconnect
        if (room != rm_connecting) {
            room_goto(rm_connecting);
        }
        active = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receiving data

if (status == NN.status_connected) {
    while (nn_has_message()) {
        //Decode response
        var messages     = nn_get_message();
        show_debug_message(messages);
        var json_data    = json_decode(messages);
        if not(ds_exists(ds_type_map, json_data)) { continue; }
        var message_id   = ds_map_find_value(json_data, 'id');
        var message_body = ds_map_find_value(json_data, 'msg');
        ds_map_destroy(json_data);
        
        //Route between different functions
        switch (message_id) {
            case NN.signal_endgame:
                system.target = -1;
                global.can_control = 0;
                obj_joy.add_mode = 0;
                obj_joy2.add_mode = 0;
                par_skill.add_mode = 0;
                
                var ins = instance_create(0, 0, obj_end);
                if(global.team == message_body) {
                    ins.message = "승리"
                    instance_create(400, 300, obj_firework);
                }else {
                    ins.message = "패배";
                }
                //room_goto(rm_search);
            break;
            
            case NN.signal_ping:
                my_ping = current_time;
                ping    = real(message_body);
            break;
            
            case NN.signal_kill_log:
                var signal_kill_log_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, signal_kill_log_data)) { break; }
                ds_list_add(global.kill_log_left, ds_map_find_value(signal_kill_log_data, "a"))
                ds_list_add(global.kill_log_right, ds_map_find_value(signal_kill_log_data, "b"))
                ds_map_destroy(signal_kill_log_data);
                system.alarm[0] = 60*5;
            break;
            
            case NN.signal_login:
                var signal_login_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, signal_login_data)) { break; }
                if ((ds_map_find_value(signal_login_data, "msg") == 1)or(ds_map_find_value(signal_login_data, "msg") == 2)) {
                    global.login = 1;
                    global.uuid  = ds_map_find_value(signal_login_data, "uuid");
                    ini_open("auto_login.ini");
                    ini_write_string("user", "id", global.login_id);
                    ini_write_string("user", "password", global.login_pass);
                    ini_close();
                    room_goto(rm_search);
                    global.nickname = ds_map_find_value(signal_login_data, "nickname");
                }else {
                    show_message_async("로그인에 실패하였습니다 ;ㅅ;");
                    file_delete("auto_login.ini");
                }
                ds_map_destroy(signal_login_data);
            break;
            
            case NN.signal_search:
                var signal_search_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, signal_search_data)) { break; }
                if(ds_map_find_value(signal_search_data, "id") == 1) {
                    global.team = ds_map_find_value(signal_search_data, "team");
                    delay_x = ds_map_find_value(signal_search_data, "x");
                    delay_y = ds_map_find_value(signal_search_data, "y");
                    global.select_char = script_similar(1, obj_select.x, sprite_get_number(obj_select.sprite_index));
                    room_goto(rm_main);
                    alarm[9] = 1;
                }
                ds_map_destroy(signal_search_data);
            break;
            
            case NN.signal_register:
                var signal_register_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, signal_register_data)) { break; }
                //show_message(ds_map_find_value(signal_register_data, "msg"));
                if(ds_map_find_value(signal_register_data, "msg") == 1) {
                    with(obj_guestLogin) {
                        if(guestLogin == 1) {
                            //Construct message
                            var json_data = ds_map_create();
                            ds_map_add(json_data, "id", NN.signal_login);
                            ds_map_add(json_data, "msg",global.login_id);
                            ds_map_add(json_data, "pass",global.login_pass);
                            var body = json_encode(json_data);
                            ds_map_destroy(json_data);
                            
                            //Send message
                            nn_send_message(body);
                        }
                    }
                }
                ds_map_destroy(signal_register_data);
            break;
            
            case NN.signal_restart:
                var temp_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, temp_data)) { break; }
                with(par_player) {
                    if(variable_instance_exists(id, "control")) {
                        if(control == 1) {
                            system.target = -2;
                            x = ds_map_find_value(temp_data, "x");
                            y = ds_map_find_value(temp_data, "y");
                        }
                    }
                }
                ds_map_destroy(temp_data);
            break;
            
            case NN.signal_myinfo:
                var temp_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, temp_data)) { break; }
                global.hp = ds_map_find_value(temp_data, "hp");
                global.sp = ds_map_find_value(temp_data, "sp");
                global.red_gage = ds_map_find_value(temp_data, "red_gage");
                global.blue_gage = ds_map_find_value(temp_data, "blue_gage");
                global.engagement = ds_map_find_value(temp_data, "engagement");
                with(par_player){if(variable_instance_exists(id, "control")) {if(control == 1){respawn = ds_map_find_value(temp_data, "respawn");}}}
                with(par_player){
                    if(variable_instance_exists(id, "control")) {
                        if(system.target == -2) {
                            if(ds_map_find_value(temp_data, "respawn") == -1) {
                                obj_joy.add_mode = 1;
                                obj_joy2.add_mode = 1;
                                par_skill.add_mode = 1;
                                obj_joy.isClick=0
                                obj_joy.tx=obj_joy.x //작은 원 위치 초기화
                                obj_joy.ty=obj_joy.y
                                obj_joy2.isClick=0
                                obj_joy2.tx=obj_joy2.x //작은 원 위치 초기화
                                obj_joy2.ty=obj_joy2.y
                                
                                global.can_control = 1;
                                instance_create(0, 0, obj_respawn);
                            }
                        }
                    }
                }
                if(ds_map_find_value(temp_data, "respawn") != -1)and(global.can_control == 1) {
                    global.can_control = 0;
                    obj_joy.add_mode = 0;
                    obj_joy2.add_mode = 0;
                    par_skill.add_mode = 0;
                    system.shake = 50;
                    obj_joy.isClick=0
                    obj_joy.tx=obj_joy.x //작은 원 위치 초기화
                    obj_joy.ty=obj_joy.y
                    obj_joy2.isClick=0
                    obj_joy2.tx=obj_joy2.x //작은 원 위치 초기화
                    obj_joy2.ty=obj_joy2.y
                }
                ds_map_destroy(temp_data);
            break;
            
            case NN.signal_instance:
                var temp_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, temp_data)) { break; }
                var signal_instance_data = json_decode(ds_map_find_value(temp_data, "msg"));
                ds_map_destroy(temp_data);
                if not(ds_exists(ds_type_map, signal_instance_data)) { break; }
                
                switch(ds_map_find_value(signal_instance_data, "type"))
                {
                    case 0:
                        // effect
                        var a = instance_create(ds_map_find_value(signal_instance_data, "x"), ds_map_find_value(signal_instance_data, "y") - 16, obj_effect);
                        a.image_angle = ds_map_find_value(signal_instance_data, "weapon_dir") - 47;
                        a.sprite_index = spr_effect;
                        a.image_single = 1;
                    break;
                    
                    case 1:
                        // fire
                        var a = instance_create(ds_map_find_value(signal_instance_data, "x") + lengthdir_x(20, ds_map_find_value(signal_instance_data, "weapon_dir")), ds_map_find_value(signal_instance_data, "y") + lengthdir_y(20, ds_map_find_value(signal_instance_data, "weapon_dir")) - 12, obj_bullet);
                        a.speed = ds_map_find_value(signal_instance_data, "speed");
                        a.direction = ds_map_find_value(signal_instance_data, "direction");
                        a.image_angle = ds_map_find_value(signal_instance_data, "weapon_dir");
                        a.image_speed = ds_map_find_value(signal_instance_data, "image_speed");
                        a.sprite_index = ds_map_find_value(signal_instance_data, "sprite_index");
                        a.move = ds_map_find_value(signal_instance_data, "move");
                        a.sprite = ds_map_find_value(signal_instance_data, "sprite");
                        a.damage = ds_map_find_value(signal_instance_data, "damage");
                        a.from = ds_map_find_value(signal_instance_data, "from");
                        a.from_team = ds_map_find_value(signal_instance_data, "team");
                        a.range = ds_map_find_value(signal_instance_data, "range");
                    break;
                    
                    case 2:
                        // fire
                        var a = instance_create(ds_map_find_value(signal_instance_data, "x") + lengthdir_x(50, ds_map_find_value(signal_instance_data, "i")*20), ds_map_find_value(signal_instance_data, "y") + lengthdir_y(50, ds_map_find_value(signal_instance_data, "i")*20) - 12, obj_bullet);
                        a.speed = ds_map_find_value(signal_instance_data, "speed");
                        a.direction = ds_map_find_value(signal_instance_data, "direction");
                        a.image_angle = ds_map_find_value(signal_instance_data, "weapon_dir");
                        a.image_speed = ds_map_find_value(signal_instance_data, "image_speed");
                        a.sprite_index = ds_map_find_value(signal_instance_data, "sprite_index");
                        a.move = ds_map_find_value(signal_instance_data, "move");
                        a.sprite = ds_map_find_value(signal_instance_data, "sprite");
                        a.damage = ds_map_find_value(signal_instance_data, "damage");
                        a.from = ds_map_find_value(signal_instance_data, "from");
                        a.from_team = ds_map_find_value(signal_instance_data, "team");
                        a.range = ds_map_find_value(signal_instance_data, "range");
                    break;
                    
                    case 3:
                        var a = instance_create(ds_map_find_value(signal_instance_data, "x") + lengthdir_x(20, ds_map_find_value(signal_instance_data, "weapon_dir")), ds_map_find_value(signal_instance_data, "y") + lengthdir_y(20, ds_map_find_value(signal_instance_data, "weapon_dir")) - 12, obj_bullet);
                        a.speed = ds_map_find_value(signal_instance_data, "speed")
                        a.direction = ds_map_find_value(signal_instance_data, "direction");
                        a.image_angle = ds_map_find_value(signal_instance_data, "weapon_dir");
                        a.image_speed = ds_map_find_value(signal_instance_data, "image_speed");
                        a.sprite_index = ds_map_find_value(signal_instance_data, "sprite_index");
                        a.turn = 1;
                        a.move = ds_map_find_value(signal_instance_data, "move");
                        a.sprite = ds_map_find_value(signal_instance_data, "sprite");
                        a.damage = ds_map_find_value(signal_instance_data, "damage");
                        a.from = ds_map_find_value(signal_instance_data, "from");
                        a.from_team = ds_map_find_value(signal_instance_data, "team");
                        a.range = ds_map_find_value(signal_instance_data, "range");
                    break;
                    
                    case 4:
                        var a = instance_create(ds_map_find_value(signal_instance_data, "x"), ds_map_find_value(signal_instance_data, "y"), obj_effect4);
                        a.damage = ds_map_find_value(signal_instance_data, "damage");
                        a.from = ds_map_find_value(signal_instance_data, "from");
                        a.from_team = ds_map_find_value(signal_instance_data, "team");
                        a.range = ds_map_find_value(signal_instance_data, "range");
                    break;
                    
                    default:
                    
                    break;
                }
                
                ds_map_destroy(signal_instance_data);
            break;
            
            case NN.signal_handoff:
                var signal_handoff_data = json_decode(message_body);
                room_goto(rm_main);
                handoff_x = ds_map_find_value(signal_handoff_data, "x");
                handoff_y = ds_map_find_value(signal_handoff_data, "y");
                handoff_type = ds_map_find_value(signal_handoff_data, "type");
                global.team = ds_map_find_value(signal_handoff_data, "team");
                user_ins = -1;
                ds_map_destroy(signal_handoff_data);
                alarm[10] = 1;
            break;
            
            case NN.signal_move:
                //show_message(message_body);
                var signal_move_data = json_decode(message_body);
                if not(ds_exists(ds_type_map, signal_move_data)) { break; }
                var check = true;
                with(par_player) {
                    if(variable_instance_exists(id, "control")) {
                        if(control == 0) {
                            if(user_id == ds_map_find_value(signal_move_data, "id")) {
                                check = false;
                                other_x = ds_map_find_value(signal_move_data, "x");
                                other_y = ds_map_find_value(signal_move_data, "y");
                                other_z = ds_map_find_value(signal_move_data, "z");
                                weapon_delay_i = ds_map_find_value(signal_move_data, "weapon_delay_i");
                                weapon_range = ds_map_find_value(signal_move_data, "weapon_range");
                                weapon_angle = ds_map_find_value(signal_move_data, "weapon_angle");
                                weapon_dir = ds_map_find_value(signal_move_data, "weapon_dir");
                                weapon_xdir = ds_map_find_value(signal_move_data, "weapon_xdir");
                                move = ds_map_find_value(signal_move_data, "move");
                                jump = ds_map_find_value(signal_move_data, "jump");
                                xdir = ds_map_find_value(signal_move_data, "xdir");
                                hp = ds_map_find_value(signal_move_data, "hp");
                                sp = ds_map_find_value(signal_move_data, "sp");
                                team = ds_map_find_value(signal_move_data, "team");
                                nickname = ds_map_find_value(signal_move_data, "nickname");
                                respawn = ds_map_find_value(signal_move_data, "respawn");
                            }
                        }
                    }
                }
                
                if(check)and(ds_map_find_value(signal_move_data, "id") != global.login_id) {
                    var _x = ds_map_find_value(signal_move_data, "x");
                    var _y = ds_map_find_value(signal_move_data, "y");
                    var user_ins = -1;
                    switch(ds_map_find_value(signal_move_data, "type")) {
                        case 1:
                            user_ins = instance_create(_x, _y, obj_sworder);
                        break;
                        
                        case 2:
                            user_ins = instance_create(_x, _y, obj_hammer);
                        break;
                            
                        case 3:
                            user_ins = instance_create(_x, _y, obj_gunner);
                        break;
                        
                        case 4:
                            user_ins = instance_create(_x, _y, obj_magician);
                        break;
                        
                        case 5:
                            user_ins = instance_create(_x, _y, obj_healer);
                        break;
                    }
                    if(user_ins != -1) {
                        user_ins.type    = ds_map_find_value(signal_move_data, "type");
                        user_ins.user_id = ds_map_find_value(signal_move_data, "id");
                    }
                }
                ds_map_destroy(signal_move_data);
            break;
            
            default:
            
            break;
        }
        
        // --
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>repeat(15) {
    var ins = instance_create(mouse_x,mouse_y, obj_effect6_0);
                                    with(ins) {
                                        b = 0;
                                        c = 100;
                                    }
                                    var ins = instance_create(mouse_x,mouse_y, obj_effect6_1);
                                    with(ins) {
                                        b = 0;
                                        c = 100;
                                    }
                                }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ping
if(ping &gt; 0)
{
    draw_set_color(c_white)
    draw_set_font(fnt_text)
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_set_alpha(1)
    draw_text(5, 5, "ping " + string(ping) + "#####recv byte " + string(global.check_bytes) + " ( " + string(global.check_bytes/1000000) + " MB )"+ "#send byte " + string(global.check_bytes_send)+ " ( " + string(global.check_bytes_send/1000000) + " MB )")
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
