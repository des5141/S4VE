<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1410065407</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
only_single();

//Set reference
application_surface_enable(false);
device_mouse_dbclick_enable(false);
randomize();

//Whether a connection (or an attempt) is active
active = false;

//Cached login info
login_uuid = "";
login_name = "";
login_id = "";

//Set ping
my_ping = current_time;
ping = current_time;

//Out ping
global.out_ping = 10000;

//Set timeout
network_set_config(network_config_connect_timeout, 200);

//Set ip
if(NN.debug_modes)
    global.ip = "127.0.0.1";
else
    global.ip = "61.84.196.75";

/* 아이피에 관해
* KT IDC 서버 외부 연결 : 61.84.196.75
* KT IDC 서버 내부 연결 : 172.16.113.102 
* 포트는 아마 기억상 20000번부터 쭉 20005번까지 열려있을거임
*/

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init values
delay_x = 0;
delay_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handoff
user_ins = -1;
global.can_control = 1;
obj_joy.add_mode = 1;
obj_joy2.add_mode = 1;
switch(handoff_type) {
    case 1:
        user_ins = instance_create(handoff_x, handoff_y, obj_sworder);
    break;
     
    case 2:
        user_ins = instance_create(handoff_x, handoff_y, obj_hammer);
    break;
                                   
    case 3:
        user_ins = instance_create(handoff_x, handoff_y, obj_gunner);
    break;
                            
    case 4:
        user_ins = instance_create(handoff_x, handoff_y, obj_magician);
    break;
}
if(user_ins != -1) {
    user_ins.control = 1;
    user_ins.user_id = global.login_id;
    user_ins.team = global.team;
    system.target = user_ins;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// New client
user_ins = -1;
switch(global.select_char) {
    //case 0:
    //    user_ins = instance_create(delay_x, delay_y, obj_sworder);
    //break;
    
    case 0:
        user_ins = instance_create(delay_x, delay_y, obj_hammer);
    break;
    
    //case 2:
    //    user_ins = instance_create(delay_x, delay_y, obj_gunner);
    //break;
    
    case 1:
        user_ins = instance_create(delay_x, delay_y, obj_magician);
    break;
}
user_ins.control = 1;
user_ins.user_id = global.login_id;
user_ins.team = global.team;
//system.target = user_ins;

var ins = instance_create(480, 360, obj_scene);
ins.target_x = user_ins.x;
ins.target_y = user_ins.y;
ins.target = user_ins;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to the correct server
nn_connect(global.ip, NN.port);

//Mark connection as active (or at least, actively in progress)
active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ping
var status = nn_status();
my_ping = current_time;
if (status == NN.status_connected){
    var buffer = buffer_create(1, buffer_grow, 1);
    buffer_write(buffer, buffer_u8, NN.signal_ping);
    nn_send_message(buffer);
    buffer_delete(buffer);
}

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connection check
status = nn_status();
if (status == NN.status_disconnected) {
    if (!active) {
        active = true;
        alarm[1] = 1; //Connect attempt
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monitor running status

if (active) {
    //Connection successful in login room, show login
    if (room == rm_connecting) &amp;&amp; (status == NN.status_connected) {
        room_goto(rm_login);
    }

    //Connection broke
    if (status == NN.status_disconnected) {
        //Connection broke while chatting, go back to login screen and ask for reconnect
        if (room != rm_connecting) {
            room_goto(rm_connecting);
        }
        active = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ping
if(ping &gt; 0)
{
    draw_set_color(c_white)
    draw_set_font(fnt_text)
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_set_alpha(1)
    draw_text(5, 5, "ping " + string(ping) + "#####recv byte " + string(global.check_bytes) + " ( " + string(global.check_bytes/1000000) + " MB )"+ "#send byte " + string(global.check_bytes_send)+ " ( " + string(global.check_bytes_send/1000000) + " MB )")
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
