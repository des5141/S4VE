<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_leg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>all_unit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT

// player image
image_speed    = 0.4;
image_index    = 0;

// variables
control        = 0; // 0 not me , 1 can control
other_x        = 0;
other_y        = 0;
other_z        = 0;
move           = 0; // 0 false , 1 true
move_mode      = 0; // 0 is normal, 1 is attaking movement
xdir           = 1; // 1 right , -1 left
player_speed   = 2.5;
z              = 0;
zspeed         = 0;
zfloor         = 0;
jump           = 0;
jump_speed     = 5;
stun           = 0; // 0 false , 1 true
stun_delay     = 0; // 0 none  , else wait on delay
attack_max     = 0; // 0 none  , else maximum attack delay
attack_delay   = 0; // 0 none  , else wait on delay
skill_delay    = 0;
weapon_index   = 0; // weapon values are using by animation
weapon_dir     = 0;
weapon_delay   = 0;
weapon_delay_j = 0;
weapon_delay_i = -100;
weapon_range   = 0;
weapon_angle   = 0;
weapon_trigger = 1;
weapon_xdir    = 1;
experence      = 0;
max_experence  = 0;
user_id        = "";// null
type           = 0; // 0 none
character_img  = 0;
hp             = 0;
hp_previous    = 0;
sp             = 0;
team           = "";// red or blue
damaged        = 0; // trigger. 1 is on, 0 is off
nickname       = "";
trigger        = 0;
respawn        = -1;
go[0]          = 0; // go to place (x)
go[1]          = 1; // go to place (y)
go[2]          = 0; // check going

// child create event
event_user(0);

alarm[1] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// damaged = 0
damaged = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MOVE &amp; i/o

if(control == 1)
{
    if(instance_place(x, y, par_block) != noone) {
        x = xprevious;
        y = yprevious;
    }
    
    // variables init
    var mouse_count;
    var mv;
    var mvx;
    var mvy;
    var i;
    var n;
    mv  = 0;
    mvx = 1;
    mvy = 1;
    dir = 0;
    kL  = 0;
    kR  = 0;
    kU  = 0;
    kD  = 0;
    
    // z processing
    if (zspeed &gt; -8){ zspeed -= 0.2; }else{ zspeed = -8; }
    if (z &lt;= zfloor){ zspeed = 0; z = zfloor; jump = 0; }else{ jump = 1; }
    
    // i/o input
    if(control == 1)
    {
        if (stun == 0) and (jump == 0)and(global.can_control == 1) { // not stun
            // KEYBOARD TO CONTROL
            if (keyboard_check(ord("A"))  ) { kL = 1; mv = 1; }
            if (keyboard_check(ord("D")) ) { kR = 1; mv = 1; }
            if (keyboard_check(ord("W"))    ) { kU = 1; mv = 1; }
            if (keyboard_check(ord("S"))  ) { kD = 1; mv = 1; }
            
            if (kL == 1) { dir = 180; xdir = -1; }
            if (kR == 1) { dir = 0;   xdir = 1;  }
            if (kU == 1) { dir = 90;             }
            if (kD == 1) { dir = 270;            }
            if (kL == 1) &amp;&amp; (kU == 1) { dir = 90 + 45;  }
            if (kL == 1) &amp;&amp; (kD == 1) { dir = 270 - 45; }
            if (kR == 1) &amp;&amp; (kU == 1) { dir = 45;       }
            if (kR == 1) &amp;&amp; (kD == 1) { dir = 270 + 45; }
            
            if (keyboard_check_pressed(vk_space)) { if(jump == 0){ zspeed = jump_speed; } }
            
            //if (os_type == os_windows)and(weapon_delay &lt;= 0)
                //weapon_dir = point_direction(x, y, mouse_x, mouse_y);
                
            if (keyboard_check_pressed(ord("1"))  ) { if (global.skill_enable[0] == 1) { event_user(1); }}
            if (keyboard_check_pressed(ord("2"))  ) { if (global.skill_enable[1] == 1) { event_user(2); }}
            if (keyboard_check_pressed(ord("3"))  ) { if (global.skill_enable[2] == 1) { event_user(3); }}
            if (keyboard_check_pressed(ord("4"))  ) { if (global.skill_enable[3] == 1) { event_user(4); }}
            
            // TOUCH TO CONTROL
            for(mouse_count = 0; mouse_count &lt; 4; mouse_count ++) {
                if (device_mouse_check_button_pressed(mouse_count, mb_right)) {
                    go[0] = device_mouse_x(mouse_count);
                    go[1] = device_mouse_y(mouse_count);
                    go[2] = 1;
                }
            }
            
            // MOBILE CONTROL
            move_mode = 0;
            if(obj_joy2._distance != 0)and(obj_joy2.activate == 1) {
                move_mode = 1;
            }
            with(par_skill) {
                if(click != -1) {
                    other.move_mode = 1;
                }
            }
            if(obj_joy._distance/40 != 0)
            {
                if(weapon_delay &lt;= 0)
                {
                    if(obj_joy._direction &gt; 90)and(obj_joy._direction &lt; 270)
                        xdir = -1;
                    else
                        xdir = 1;
                    weapon_xdir = xdir;
                    weapon_dir = obj_joy._direction;
                }
                
                if(move_mode == 0) {
                    if(!place_meeting(x+lengthdir_x(obj_joy._distance/40, obj_joy._direction), y, par_block))
                    {
                        x += lengthdir_x(obj_joy._distance/40, obj_joy._direction)
                    }
                    
                    if(!place_meeting(x, y+lengthdir_y(obj_joy._distance/40, obj_joy._direction), par_block))
                    {
                        y += lengthdir_y(obj_joy._distance/40, obj_joy._direction)
                    }
                }else {
                    if(!place_meeting(x+lengthdir_x(obj_joy._distance/80, obj_joy._direction), y, par_block))
                    {
                        x += lengthdir_x(obj_joy._distance/80, obj_joy._direction)
                    }
                    
                    if(!place_meeting(x, y+lengthdir_y(obj_joy._distance/80, obj_joy._direction), par_block))
                    {
                        y += lengthdir_y(obj_joy._distance/80, obj_joy._direction)
                    }
                }
                mv = 1
            }else{
                mv = 0
            }
            
            if(obj_joy2._distance != 0)and(obj_joy2.activate == 1) {
                if(obj_joy2._direction &gt; 90)and(obj_joy2._direction &lt; 270)
                        xdir = -1;
                    else
                        xdir = 1;
                weapon_xdir = xdir;
                weapon_dir = obj_joy2._direction;
            }
            
            with(par_skill) {
                if(click != -1) {
                    var md = point_direction(x, y, pointer[0], pointer[1]);
                    if(md &gt; 90)and(md &lt; 270)
                        other.xdir = -1;
                    else
                        other.xdir = 1;
                    other.weapon_xdir = other.xdir;
                    other.weapon_dir = md;
                }
            }
        }else { // on stun
            
        }
    }
    
    // moving processing
    n = instance_number(par_block);
    zfloor = 0;
    for(i = 0; i &lt; n; i += 1;) {
        it = instance_find(par_block, i);
        if (place_meeting(x, y, it)) {
            if (z &gt;= it.z + it.ztop) {
                zfloor = it.z + it.ztop;
            }
        }
        /*if (mvx == 1) {
            if (place_meeting(x + lengthdir_x(player_speed, dir), y, it)) {
                if (it.z &lt;= z &amp;&amp; z &lt; it.z + it.ztop) {
                    x = xprevious;
                    mvx = 0;
                }
            }
        }
        if (mvy == 1) {
            if (place_meeting(x, y + lengthdir_y(player_speed, dir), it)) {
                if (it.z &lt;= z &amp;&amp; z &lt; it.z + it.ztop) {
                    y = yprevious;
                    mvy = 0;
                }
            }
        }*/
    }
    
    /*if (mv == 1) {
        // KEYBOARD MOVE
        x += lengthdir_x(player_speed, dir) * mvx;
        y += lengthdir_y(player_speed, dir) * mvy;
    }
    
    if (go[2] == 1) {
        // MOUSE MOVE
        if(point_distance(go[0], go[1], x, y) &lt; player_speed) {
            go[2] = 0;
        }else {
            mp_potential_step(go[0], go[1], player_speed, 0);
            mv = 1;
        }
        if(weapon_delay &lt;= 0)
        {
            if (x &gt; xprevious)
                xdir = 1;
            else if(x &lt; xprevious)
                xdir = -1;
        }
    }
    if(weapon_delay &lt;= 0)
    {
        if(mouse_x &lt; x)
            xdir = -1;
        else if(mouse_x &gt; x)
            xdir = 1;
        weapon_xdir = xdir;
    }*/
    
    move = mv;
    z   += zspeed;
}else {
    if(point_distance(other_x, other_y, x, y) &gt; 30) {
        x = other_x;
        y = other_y;
    }else {
        x += (other_x - x)/3;
        y += (other_y - y)/3;
        z += (other_z - z)/3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ATTACK
if(control == 1)
{
    // delay decrease'
    if (attack_delay &gt; 0) { attack_delay--; }
    if (weapon_delay &gt; 0) { weapon_delay--; if (weapon_delay_j != 0) { weapon_delay_i += ((200 * weapon_trigger) / weapon_delay_j); }}
    weapon_range += (0 - weapon_range)/8;
    if (weapon_delay &lt;= 0) {
        weapon_angle += (0 - weapon_angle)/8;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NETWORKING
if(control == 1) {
    var buffer = buffer_create(1, buffer_grow, 1);
    buffer_write(buffer, buffer_u8, NN.signal_move);
    buffer_write(buffer, buffer_u8, type);
    buffer_write(buffer, buffer_u16, x);
    buffer_write(buffer, buffer_u16, y);
    buffer_write(buffer, buffer_u16, z);
    buffer_write(buffer, buffer_s16, weapon_delay_i);
    buffer_write(buffer, buffer_s16, weapon_range);
    buffer_write(buffer, buffer_s16, weapon_angle);
    buffer_write(buffer, buffer_s16, weapon_dir);
    buffer_write(buffer, buffer_s16, weapon_xdir);
    buffer_write(buffer, buffer_s8, move);
    buffer_write(buffer, buffer_s8, jump);
    buffer_write(buffer, buffer_s8, xdir);
    nn_send_message(buffer);
    buffer_delete(buffer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_danger">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HP
if(control == 1) {
    if(other.team != global.team){
        var buffer = buffer_create(1, buffer_grow, 1);
        buffer_write(buffer, buffer_u8, NN.signal_hp);
        buffer_write(buffer, buffer_s8, 5);
        buffer_write_string(buffer, global.login_id);
        nn_send_message(buffer);
        buffer_delete(buffer);
    }else{
        var buffer = buffer_create(1, buffer_grow, 1);
        buffer_write(buffer, buffer_u8, NN.signal_hp);
        buffer_write(buffer, buffer_s8, -1);
        buffer_write_string(buffer, global.login_id);
        nn_send_message(buffer);
        buffer_delete(buffer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(control == 1)and(respawn != -1) {
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(0, 0, 800, 480, false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(fnt_text);
    draw_set_halign(fa_center);
    draw_text(400, 300, "사망하셨습니다. " + string(ceil(respawn/60)) + "초 후 리스폰 됩니다.");
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW
if(respawn == -1) {
img = -1;
if (jump == 0) {
    if (move == 0) {
        img = 0;
    }
}else {
    img = 0;
}

// shadow
draw_set_alpha(0.5);
draw_ellipse_color(x - 12, y - 4 - zfloor, x + 12, y + 4 - zfloor, c_black, c_black, 0);
draw_set_alpha(1);

// player
draw_sprite_ext(sprite_index, img, x, y - z, xdir, 1, 0, c_white, 1); // leg
draw_sprite_ext(spr_body, character_img, x, y - z, xdir, 1, 0, c_white, 1); // body

// weapon
draw_sprite_ext(spr_weapon, weapon_index, x + lengthdir_x(weapon_range, weapon_dir), y - 12 - z + lengthdir_y(weapon_range, weapon_dir), 1, weapon_xdir, weapon_dir + (97 + weapon_delay_i)*weapon_xdir + weapon_angle*weapon_xdir, c_white, 1);

if(damaged == 1) {
    d3d_set_fog(true,c_white,0,0);
    // player
    draw_sprite_ext(sprite_index, img, x, y - z, xdir, 1, 0, c_white, 1); // leg
    draw_sprite_ext(spr_body, character_img, x, y - z, xdir, 1, 0, c_white, 1); // body
    
    // weapon
    draw_sprite_ext(spr_weapon, weapon_index, x + lengthdir_x(weapon_range, weapon_dir), y - 12 - z + lengthdir_y(weapon_range, weapon_dir), 1, weapon_xdir, weapon_dir + (97 + weapon_delay_i)*weapon_xdir + weapon_angle*weapon_xdir, c_white, 2);
    d3d_set_fog(false,c_white,0,0);
}


// hp
if(control == 1) {
    if(hp_previous &gt; global.hp)
        hp_previous -= 0.25;
    else
        hp_previous = global.hp;
        
        
    draw_set_color(c_black);
    draw_rectangle(x - 20, y - 35 - z, x + 20, y - 30 - z, false);
    draw_set_color(c_gray);
    draw_rectangle(x - 19, y - 34 - z, x + 19, y - 31 - z, false);
    
    draw_set_color(c_orange);
    draw_rectangle(x - 19, y - 34 - z, x - 19 + 38/100*hp_previous, y - 31 - z, false);
    
    draw_set_color(c_red);
    draw_rectangle(x - 19, y - 34 - z, x - 19 + 38/100*global.hp, y - 31 - z, false);
    
    // nickname
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_set_font(fnt_nickname);
    draw_set_color(c_black);
    
    draw_text(x+1, y - 35 - z, global.nickname);
    draw_text(x-1, y - 35 - z, global.nickname);
    draw_text(x, y+1 - 35 - z, global.nickname);
    draw_text(x, y-1 - 35 - z, global.nickname);
    
    draw_set_color(c_white);
    draw_text(x, y - 35 - z, global.nickname);
}
else {
    var check = collision_point(x, y, obj_bushi, false, true);
    var check2 = 0;
    if(check == noone) {
        check2 = 1;
    }else if(check.trigger == 1) {
        check2 = 1;
    }
    
    
    if(check2 == 1) {
        if(hp_previous &gt; hp)
            hp_previous -= 0.25;
        else
            hp_previous = hp;
            
        draw_set_color(c_black);
        draw_rectangle(x - 20, y - 35 - z, x + 20, y - 30 - z, false);
        draw_set_color(c_gray);
        draw_rectangle(x - 19, y - 34 - z, x + 19, y - 31 - z, false);
        
        draw_set_color(c_orange);
        draw_rectangle(x - 19, y - 34 - z, x - 19 + 38/100*hp_previous, y - 31 - z, false);
        
        draw_set_color(c_red);
        draw_rectangle(x - 19, y - 34 - z, x - 19 + 38/100*hp, y - 31 - z, false);
        
        // nickname
        draw_set_halign(fa_center);
        draw_set_valign(fa_bottom);
        draw_set_font(fnt_nickname);
        draw_set_color(c_black);
        
        draw_text(x+1, y - 35 - z, nickname);
        draw_text(x-1, y - 35 - z, nickname);
        draw_text(x, y+1 - 35 - z, nickname);
        draw_text(x, y-1 - 35 - z, nickname);
        
        if(team != global.team)
            draw_set_color(c_red);
        else
            draw_set_color(c_white);
            
        draw_text(x, y - 35 - z, nickname);
    }
}

//draw_text(x, y - 60, team);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,32</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
